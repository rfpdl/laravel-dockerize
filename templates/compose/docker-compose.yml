# Production Docker Compose for Laravel

services:
  nginx:
    build:
      context: .
      dockerfile: ./docker/production/nginx/Dockerfile
    restart: unless-stopped
    volumes:
      - laravel-storage:/var/www/storage:ro
      - laravel-public-assets:/var/www/public/build:ro
    networks:
      - app-network
    ports:
      - "${NGINX_PORT:-80}:80"
    depends_on:
      app:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run

  app:
    build:
      context: .
      dockerfile: ./docker/common/php-fpm/Dockerfile
      target: production
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - laravel-public-assets:/var/www/public/build
      - laravel-storage:/var/www/storage
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=${DB_CONNECTION:-pgsql}
      - DB_HOST=${DB_HOST:-maindb}
      - DB_PORT=${DB_PORT:-5432}
      - DB_DATABASE=${DB_DATABASE:-app_main}
      - DB_USERNAME=${DB_USERNAME:-app}
      - DB_PASSWORD=${DB_PASSWORD:-secret}
      - LOG_DB_CONNECTION=${LOG_DB_CONNECTION:-pgsql}
      - LOG_DB_HOST=${LOG_DB_HOST:-logdb}
      - LOG_DB_PORT=${LOG_DB_PORT:-5432}
      - LOG_DB_DATABASE=${LOG_DB_DATABASE:-app_logs}
      - LOG_DB_USERNAME=${LOG_DB_USERNAME:-app}
      - LOG_DB_PASSWORD=${LOG_DB_PASSWORD:-secret}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - CACHE_DRIVER=${CACHE_DRIVER:-redis}
      - SESSION_DRIVER=${SESSION_DRIVER:-redis}
      - QUEUE_CONNECTION=${QUEUE_CONNECTION:-redis}
      - APP_KEY=${APP_KEY:-base64:generated_key_here}
      - APP_URL=${APP_URL:-http://localhost}
    healthcheck:
      test: ["CMD-SHELL", "php-fpm-healthcheck || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      maindb:
        condition: service_healthy
      logdb:
        condition: service_healthy
      redis:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true

  horizon:
    build:
      context: .
      dockerfile: ./docker/common/php-fpm/Dockerfile
      target: production
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - laravel-storage:/var/www/storage
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=${DB_CONNECTION:-pgsql}
      - DB_HOST=${DB_HOST:-maindb}
      - DB_PORT=${DB_PORT:-5432}
      - DB_DATABASE=${DB_DATABASE:-app_main}
      - DB_USERNAME=${DB_USERNAME:-app}
      - DB_PASSWORD=${DB_PASSWORD:-secret}
      - LOG_DB_CONNECTION=${LOG_DB_CONNECTION:-pgsql}
      - LOG_DB_HOST=${LOG_DB_HOST:-logdb}
      - LOG_DB_PORT=${LOG_DB_PORT:-5432}
      - LOG_DB_DATABASE=${LOG_DB_DATABASE:-app_logs}
      - LOG_DB_USERNAME=${LOG_DB_USERNAME:-app}
      - LOG_DB_PASSWORD=${LOG_DB_PASSWORD:-secret}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - CACHE_DRIVER=${CACHE_DRIVER:-redis}
      - SESSION_DRIVER=${SESSION_DRIVER:-redis}
      - QUEUE_CONNECTION=${QUEUE_CONNECTION:-redis}
      - APP_KEY=${APP_KEY:-base64:generated_key_here}
      - APP_URL=${APP_URL:-http://localhost}
    command: ["php", "artisan", "horizon"]
    depends_on:
      maindb:
        condition: service_healthy
      logdb:
        condition: service_healthy
      redis:
        condition: service_healthy

  maindb:
    image: postgres:16-alpine
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_DATABASE:-app_main}
      - POSTGRES_USER=${DB_USERNAME:-app}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secret}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - maindb-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-app}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    user: postgres

  logdb:
    image: postgres:16-alpine
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${LOG_DB_DATABASE:-app_logs}
      - POSTGRES_USER=${LOG_DB_USERNAME:-app}
      - POSTGRES_PASSWORD=${LOG_DB_PASSWORD:-secret}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - logdb-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${LOG_DB_USERNAME:-app}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    user: postgres

  redis:
    image: redis:7-alpine
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    user: redis

networks:
  app-network:
    driver: bridge

volumes:
  maindb-data:
  logdb-data:
  redis-data:
  laravel-storage:
  laravel-public-assets:
